namespace TrafficManager.U.MainMenu {
    using System;
    using ColossalFramework.UI;
    using TrafficManager.UI;
    using TrafficManager.UI.MainMenu;
    using TrafficManager.UI.Textures;
    using UnityEngine;

    public static class MainMenuBuilder {
        private const string MAIN_MENU_BUTTON_ID = "TMPE_MainButton";

        /// <summary>
        /// This name is autogenerated in game by appending "Panel" to MAIN_MENU_BUTTON_ID
        /// </summary>
        private const string MAIN_MENU_PANEL_ID = "TMPE_MainButtonPanel";

        private const bool CENTER_TOOLBAR = false;

        private const string MAIN_MENU_BUTTON_BG_BASE = "TMPE_MainMenuButtonBgBase";
        private const string MAIN_MENU_BUTTON_BG_HOVERED = "TMPE_MainMenuButtonBgHovered";
        private const string MAIN_MENU_BUTTON_BG_ACTIVE = "TMPE_MainMenuButtonBgActive";
        private const string MAIN_MENU_BUTTON_FG_BASE = "TMPE_MainMenuButtonFgBase";
        private const string MAIN_MENU_BUTTON_FG_HOVERED = "TMPE_MainMenuButtonFgHovered";
        private const string MAIN_MENU_BUTTON_FG_ACTIVE = "TMPE_MainMenuButtonFgActive";

        public static UITextureAtlas CreateAtlas() {
            string[] spriteNames = {
                                       MAIN_MENU_BUTTON_BG_BASE,
                                       MAIN_MENU_BUTTON_BG_HOVERED,
                                       MAIN_MENU_BUTTON_BG_ACTIVE,
                                       MAIN_MENU_BUTTON_FG_BASE,
                                       MAIN_MENU_BUTTON_FG_HOVERED,
                                       MAIN_MENU_BUTTON_FG_ACTIVE,
                                   };

            UITextureAtlas atlas = TextureResources.CreateTextureAtlas(
                "MainMenuAtlas",
                spriteNames,
                "MainMenu.");

            UITextureAtlas defaultAtlas = TextureResources.GetAtlas("Ingame");
            Texture2D[] textures = {
                                       defaultAtlas["ToolbarIconGroup6Focused"].texture,
                                       defaultAtlas["ToolbarIconGroup6Hovered"].texture,
                                       defaultAtlas["ToolbarIconGroup6Normal"].texture,
                                       defaultAtlas["ToolbarIconGroup6Pressed"].texture,
                                       defaultAtlas["IconPolicyLeisure"].texture,
                                       defaultAtlas["IconPolicyTourist"].texture,
                                   };

            TextureResources.AddTexturesInAtlas(atlas, textures);

            return atlas;
        }

        /// <summary>
        /// Constructs the bu
        /// </summary>
        /// <param name="defaultXPos"></param>
        /// <returns></returns>
        internal static UIButton ConstructMainMenuButton(out float defaultXPos) {
            GameObject maybeButton = GameObject.Find(MAIN_MENU_BUTTON_ID);
            if (maybeButton != null) {
                // if other copy of TMPE is running, this will break main menu of the other copy
                GameObject.Destroy(maybeButton);
            }

            // Access the game main tool tab
            UITabstrip uiTabStrip = ToolsModifierControl.mainToolbar.component as UITabstrip;
            // MainToolbar mainToolbar = ToolsModifierControl.mainToolbar;
            defaultXPos = uiTabStrip.relativePosition.x;
            UpdateMainToolbar(defaultXPos);

            GameObject mainToolbarButtonTemplate = UITemplateManager.GetAsGameObject("MainToolbarButtonTemplate");
            GameObject scrollSubpanelTemplate = UITemplateManager.GetAsGameObject("ScrollableSubPanelTemplate");

            var b = uiTabStrip.AddTab(
                        MAIN_MENU_BUTTON_ID,
                        mainToolbarButtonTemplate,
                        scrollSubpanelTemplate,
                        new Type[] { typeof(MainMenuPanel) }) as UIMainMenuButton;
            b.atlas = U.MainMenu.MainMenuBuilder.CreateAtlas();
            // var b = (UIMainMenuButton)uiView.AddUIComponent(typeof(UIMainMenuButton));
            UpdateSprites(b);

            return b;
        }

        private static void UpdateMainToolbar(float defaultXPos) {
            UITabstrip tabstrip = ToolsModifierControl.mainToolbar.component as UITabstrip;
            if (tabstrip == null) {
                return;
            }

            void UpdatePositionFn(UIComponent c, UIComponent p) {
                MainMenuBuilder.UpdatePosition_(c, p, defaultXPos);
            }

            tabstrip.eventComponentAdded -= new ChildComponentEventHandler(UpdatePositionFn);
            tabstrip.eventComponentRemoved -= new ChildComponentEventHandler(UpdatePositionFn);

            if (CENTER_TOOLBAR) {
                tabstrip.eventComponentAdded += new ChildComponentEventHandler(UpdatePositionFn);
                tabstrip.eventComponentRemoved += new ChildComponentEventHandler(UpdatePositionFn);
                UpdatePositionFn(tabstrip, null);
            } else {
                tabstrip.relativePosition = new Vector3(defaultXPos, tabstrip.relativePosition.y);
            }
        }

        private static void UpdatePosition_(UIComponent c, UIComponent p, float defaultXPos) {
            UITabstrip tabstrip = c as UITabstrip;

            float width = 0;
            foreach (UIComponent child in tabstrip.tabs) {
                width += child.width;
            }

            float newXPos = (tabstrip.parent.width - width) / 2;
            tabstrip.relativePosition = new Vector3(
                Mathf.Min(defaultXPos, newXPos),
                tabstrip.relativePosition.y);
        }

        internal static void UpdateSprites(UIButton button) {
            button.normalFgSprite = MAIN_MENU_BUTTON_FG_BASE;
            // if (!LoadingExtension.BaseUI.IsVisible()) {
            //     m_BackgroundSprites.m_Normal = m_BackgroundSprites.m_Disabled =
            //                                        m_BackgroundSprites.m_Focused =
            //                                            MAIN_MENU_BUTTON_BG_BASE;
            //     m_BackgroundSprites.m_Hovered = MAIN_MENU_BUTTON_BG_HOVERED;
            //     m_PressedBgSprite = MAIN_MENU_BUTTON_BG_ACTIVE;
            //
            //     m_ForegroundSprites.m_Normal = m_ForegroundSprites.m_Disabled =
            //                                        m_ForegroundSprites.m_Focused =
            //                                            MAIN_MENU_BUTTON_FG_BASE;
            //     m_ForegroundSprites.m_Hovered = MAIN_MENU_BUTTON_FG_HOVERED;
            //     m_PressedFgSprite = MAIN_MENU_BUTTON_FG_ACTIVE;
            // } else {
            //     m_BackgroundSprites.m_Normal = m_BackgroundSprites.m_Disabled =
            //                                        m_BackgroundSprites.m_Focused =
            //                                            m_BackgroundSprites.m_Hovered =
            //                                                MAIN_MENU_BUTTON_BG_ACTIVE;
            //     m_PressedBgSprite = MAIN_MENU_BUTTON_BG_HOVERED;
            //
            //     m_ForegroundSprites.m_Normal = m_ForegroundSprites.m_Disabled =
            //                                        m_ForegroundSprites.m_Focused =
            //                                            m_ForegroundSprites.m_Hovered =
            //                                                MAIN_MENU_BUTTON_FG_ACTIVE;
            //     m_PressedFgSprite = MAIN_MENU_BUTTON_FG_HOVERED;
            // }

            button.Invalidate();
        }
    }
}